package com.tistory.comfy91.excuseme_android.feature.disabledimport android.content.Contextimport android.media.AudioManagerimport android.media.MediaPlayerimport android.os.Handlerimport android.speech.tts.TextToSpeechimport android.util.Logimport android.view.LayoutInflaterimport android.view.Viewimport android.view.ViewGroupimport android.widget.ImageViewimport android.widget.TextViewimport android.widget.Toastimport androidx.constraintlayout.widget.ConstraintLayoutimport androidx.recyclerview.widget.RecyclerViewimport com.bumptech.glide.Glideimport com.tistory.comfy91.excuseme_android.data.CardBeanimport com.tistory.comfy91.excuseme_android.data.ResCardsimport com.tistory.comfy91.excuseme_android.data.SingletoneTokenimport com.tistory.comfy91.excuseme_android.data.repository.ServerCardDataRepositoryimport com.tistory.comfy91.excuseme_android.logDebugimport com.tistory.comfy91.excuseme_android.setOnSingleClickListenerimport org.w3c.dom.Textimport retrofit2.Callimport retrofit2.Callbackimport retrofit2.Responseimport java.io.IOExceptionimport java.util.*import kotlin.collections.ArrayListclass CardAdapter(private val listener: ItemClickListener) : RecyclerView.Adapter<CardAdapter.CardViewHolder>() {    private var player: MediaPlayer? = null    private var playFlag = false    var data = ArrayList<CardBean>()    private val cardDataRepository = ServerCardDataRepository()    private var token = SingletoneToken.getInstance().token    override fun onCreateViewHolder(parent: ViewGroup, p1: Int) = CardViewHolder(parent)    override fun getItemCount(): Int {        return data.size    }    override fun onBindViewHolder(holder: CardViewHolder, position: Int) {        holder.bind(data.get(position))    }    override fun getItemViewType(position: Int): Int {        return position    }    inner class CardViewHolder(parent: ViewGroup) : RecyclerView.ViewHolder(        LayoutInflater.from(parent.context).inflate(com.tistory.comfy91.excuseme_android.R.layout.disabled_item_card, parent, false)    ) {        private val panel: ConstraintLayout = itemView.findViewById(com.tistory.comfy91.excuseme_android.R.id.panel)        private val imgCard: ImageView = itemView.findViewById(com.tistory.comfy91.excuseme_android.R.id.imgCard)        private val tvCardTitle: TextView = itemView.findViewById(com.tistory.comfy91.excuseme_android.R.id.tvCardTitle)        fun bind(data: CardBean) {            Glide.with(itemView).load(data.imageUrl).into(imgCard)            tvCardTitle.text = data.title            itemView.setOnCardSingleClickListener {                panel.isSelected = !panel.isSelected                if(data.audioUrl.isNullOrEmpty()){                    (itemView.context as DisabledActivity).tts.speak(data.desc, TextToSpeech.QUEUE_FLUSH, null, null)                }                else{                    play(data.audioUrl!!)                }                listener.onItemClicked(data.desc)                Handler().postDelayed(Runnable {                    panel.isSelected = false                    listener.onItemClickTimeFnished()                },CARD_DELAY_CLICK_TIME)                incCoutUp(data)            }    }        private fun incCoutUp(card: CardBean){            if(token == null){                token = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWR4Ijo1OSwidXVpZCI6ImYzZDViM2E1LTkwYjYtNDVlMy1hOThhLTEyODE5OWNmZTg1MCIsImlhdCI6MTU3ODA1NzY0NiwiZXhwIjoxNTc4MTQ0MDQ2LCJpc3MiOiJnYW5naGVlIn0.BnvDCdcAwjzne2LvJthdFhGqVC0BGPu06Ye2ocG1kec"            }            cardDataRepository                .incCardCount(token!!, card.cardIdx.toString())                .enqueue(object: Callback<ResCards> {                    override fun onFailure(call: Call<ResCards>, t: Throwable) {                        "Fail to Down Card, message : ${t.message}".logDebug(itemView.context)                    }                    override fun onResponse(call: Call<ResCards>, response: Response<ResCards>) {                        "code : ${response.code()}, message : ${response.message()}".logDebug(itemView.context)                        if(response.isSuccessful){                            response.body()                                ?.let{ res ->                                    "카드 클릭 횟수 증가, status : ${res.status}, success: ${res.success}, message : ${res.message}, data: ${res.data}".logDebug(itemView.context)                                }                        }                        else{                            "Down Card is not success,  message : ${response.message()}, code : ${response.code()} "                        }                    }                })        }        fun View.setOnCardSingleClickListener(debounceTime: Long = CARD_DELAY_CLICK_TIME, action: ()->Unit){            this.setOnClickListener (object: View.OnClickListener{                override fun onClick(p0: View?) {                    if((System.currentTimeMillis() - CARD_LAST_CLICK_TIME) < debounceTime){                        Log.d("Single Click", "연속 클릭 발생")                    }else {                        Log.d("Single Click", "action()")                        action()                        CARD_LAST_CLICK_TIME = System.currentTimeMillis()                    }                }            })        }    }    private fun play(audioUrl: String){        onPlay(audioUrl, playFlag)        playFlag != playFlag    }    private fun onPlay(audioUrl: String, playFlag: Boolean){        startPlaying(audioUrl)    }    private fun startPlaying(audioUrl: String){        player = MediaPlayer().apply {            try{                setAudioStreamType(AudioManager.STREAM_MUSIC)                setDataSource(audioUrl)                prepare()                start()            }catch (e: IOException){                "prepare() failed".logDebug(this@CardAdapter)            }        }    }    fun stopPlaying(){        player?.release()        player = null    }    interface ItemClickListener {        fun onItemClicked(desc: String)        fun onItemClickTimeFnished()    }    companion object {        var CARD_LAST_CLICK_TIME : Long = 0        var CARD_DELAY_CLICK_TIME : Long = 5000L    }}